No mundo digital, onde dados se tornam cada vez mais valiosos, entender a relação entre banco de dados e SGBD é crucial para empresas e profissionais de diversas áreas.

O que é um Banco de Dados?
Imagine um armário organizado com diferentes gavetas para cada tipo de item: camisas, calças, sapatos, etc. Um banco de dados funciona de maneira similar, armazenando informações estruturadas de forma organizada e eficiente.

Tipos de Banco de Dados:
* Relacional: o mais comum, organiza dados em tabelas interligadas.
* Não relacional: armazena dados sem estrutura rígida, como em um e-mail.
* NoSQL: ideal para grandes volumes de dados não estruturados.
* Características de um Banco de Dados:

Organização: dados estruturados em tabelas, linhas e colunas.
* Eficiência: acesso rápido e fácil às informações.
* Segurança: proteção contra acessos não autorizados e perda de dados.
* Integridade: garante que os dados sejam precisos e consistentes.
* Compartilhamento: permite o acesso simultâneo de vários usuários.

O que é um SGBD?
O SGBD, sigla para Sistema Gerenciador de Banco de Dados, é o software que cuida da organização, do armazenamento e da manipulação dos dados no banco de dados. É como o gerente do armário, que organiza as gavetas, coloca e retira os itens, e garante que tudo esteja em ordem.

Funções Essenciais do SGBD:
* Criar e estruturar o banco de dados: define as tabelas, colunas e relacionamentos entre os dados.
* Armazenar e recuperar dados: insere, atualiza e exclui informações de forma segura.
* Gerenciar acesso e segurança: controla quem pode acessar os dados e como isso é feito.
* Garantir a integridade dos dados: evita inconsistências e erros nas informações.
* Otimizar o desempenho: garante acesso rápido e eficiente aos dados.

Tipos de SGBD:
* Relacionais: como MySQL, PostgreSQL e Oracle Database.
* NoSQL: como MongoDB, Cassandra e CouchDB.
* Em nuvem: como Amazon RDS, Microsoft Azure SQL Database e Google Cloud SQL.

Escolhendo o SGBD Ideal:
A escolha do SGBD correto depende das necessidades do projeto, como tipo de dados, volume de informações, performance e orçamento.

Benefícios de Usar um SGBD:
* Organização e eficiência: facilita o gerenciamento e a recuperação de dados.
* Segurança e confiabilidade: protege os dados contra acessos indevidos e perdas.
* Integridade dos dados: garante que as informações sejam precisas e consistentes.
* Compartilhamento de dados: permite o acesso simultâneo de vários usuários.
* Escalabilidade: possibilita o crescimento do banco de dados conforme a necessidade.

Exemplos de Aplicações de Bancos de Dados e SGBDs:
* Lojas virtuais: armazenam informações sobre produtos, clientes, pedidos e estoque.
* Redes sociais: guardam dados de perfis, publicações, interações e mensagens.
* Instituições financeiras: gerenciam contas, transações, investimentos e dados de clientes.
* Hospitais: armazenam prontuários médicos, exames, histórico de pacientes e medicamentos.
* Governos: registram informações de cidadãos, impostos, benefícios e serviços públicos.

Lembre-se: investir em um bom banco de dados e SGBD significa ganhar em organização, segurança, eficiência e competitividade no mercado.

---------------------------------------------------------- SGBD -------------------------------------------------------------------------------
Funcionalidades básicas de um SGBD: 
Creat
Read 
Update 
Delete

Características de um SGBD:
Relacionamento entre tabelas
* Linguagem de Consulta Estruturada (SQL)
* Integridade referencial
* Normalização de dados
* Segurança
* Flexibilidade e extensibilidade
* Suporte a transações ACID

ACID:
Atomicidade 
Consistência 
Isolamento 
Durabilidade

TABELAS, COLUNAS E REGISTROS:
* Tabelas: Ela é usada para armazenar dados de forma organizada. Cada tabela em um banco de dados relacional tem um nome único e é dividida em colunas e linhas
* Colunas: Uma coluna é uma estrutura dentro de uma tabela que representa um atributo específico dos dados armazenados. Cada coluna tem um nome único e um tipo de  dados associado que define o tipo de informação que pode ser armazenado nela, como números, textos, datas, etc.
* Registros: Um registro, também conhecido como linha ou tupla, é uma instância individual de dados em uma tabela.

Comando CREAT TABLE:
* Chaves primárias e estrangeiras
* Auto-incremento
* Restrições de valor:
- NOT NULL
- UNIQUE (usar para e-mail de login, por exemplo)
- DEFAULT 
Exemplo: 
CREATE TABLE destinos (
  id INT,
  nome VARCHAR(255) NOT NULL UNIQUE COMMENT 'Nome do destino',
  descricao VARCHAR(255) NOT NULL COMMENT 'Descrição do destino'
);

Comando INSERT INTO:
INSERT INTO nomeTabela (<coluna1>, <coluna2>, <coluna3>)
VALUES (<valor1>, <valor2>, <valor3>);

Comando: SELECT com Where
SELECT {{ lista_colunas}}
FROM tabela
WHERE {{condicao}};

Operadores SELECT com WHERE
* = (igualdade)
* <> ou != (desigualdade)
* > (maior que)
* < (menor que)
* >= (maior ou igual que)
* <= (menor ou igual que)
* LIKE (comparação de padrões)
* IN (pertence a uma lista de valores)
* BETWEEN (dentro de um intervalo)
* AND (e lógico)
* OR (ou lógico)

Comando UPDATE:
UPDATE {{ tabela }}
SET
{{ coluna_1 }} = {{ novo_valor_1 }},
{{ coluna_2 }} = {{ novo_valor_2 }}
WHERE
{{ condicao }};

Comando DELETE:
DELETE FROM
{{ tabela }}
WHERE
{{ condicao }};

Alteração e exclusão de tabelas:
* cria tabela;
* migra dados: com "INSERT INTO <novaTabela> SELECT * from <tabelaAntiga>;
* Exclui tabela anterior com "DROP table <tabelaAntiga>;"
* Renomea nova tabela com: "ALTER TABLE <novaTabela> RENAME <nomeTabelaAntiga>;"
Ou opção 2: Altera coluna específica com "ALTER TABLE <nomeTabela> MODIFY COLUMN <nomeColunaASerModificada> VARCHAR(100);"

Drop Table:
usado no SQL - para remover uma tabela existente de um banco de dados relacional. Ele exclui permanentemente a tabela
DROP TABLE {{tabela}}

Alter Table: 
A cláusula ALTER TABLE é usada no SQL para modificar a estrutura de uma tabela existente em um banco de dados 
relacional. Ela permite:
* Adicionar, alterar ou excluir colunas
* Modificar as restrições, índices
* Renomear a tabela entre outras alterações

Chaves Primárias:
* Identifica exclusivamente
* Não pode conter valores nulos (NULL) 
* Uma tabela pode ter apenas uma chave primária.
CREATE TABLE {{tabela}}
( ID PRIMARY KEY AUTOINCREMENT,
… );
ALTER TABLE {{tabela}}
MODIFY COLUMN ID INT PRIMARY KEY;

Chaves estrangeiras:
Ela é usada para estabelecer e manter a integridade dos dados entre tabelas relacionadas
* Pode ser nula (NOT NULL); ** registro órfão
* É possível ter mais de uma (ou nenhuma) em uma tabela.
CREATE TABLE {{tabela }} (
id INT PRIMARY KEY,
chave_estrangeira INT,
FOREIGN KEY (chave_estrangeira) REFERENCES {{outra 
tabela }} (id)
);
Definição de Chave estrangeira após criação da tabela:
ALTER TABLE {{ tabela }}
ADD CONSTRAINT {{nome_constraint }} 
FOREIGN KEY (ID_) 
REFERENCES {{outra_tabela}} (ID)

Restrições de Chaves estrangeiras:
* ON DELETE especifica o que acontece com os registros dependentes quando um registro pai é excluído.
* ON UPDATE define o comportamento dos registros dependentes quando um registro pai é atualizado.
* CASCADE, SET NULL, SET DEFAULT e RESTRICT

Normalização de Dados:
É um processo no qual se organiza e estrutura um banco de dados relacional de forma a eliminar redundâncias e anomalias, garantindo a 
consistência e integridade dos dados. 
1FN: Atomicidade de dados:
A 1FN estabelece que cada valor em uma tabela deve ser atômico, ou seja, indivisível. Nenhum campo deve conter 
múltiplos valores ou listas. No seu caso, o campo "endereco" contém múltiplos valores, como rua, número, 
cidade e estado. Para atingir a 1FN, precisamos dividir o campo "endereco" em colunas separadas.

2FN: estabelece que uma tabela deve estar na 1FN.
Todos os atributos não chave devem depender totalmente da chave primária. 
Dica se sua tabela tem uma chave primária simples não existe a possibilidade de termos dependência parcial e por tanto ela 
já se encontra na 2FN

3FN: Uma tabela deve estar na 2FN .
Nenhuma coluna não-chave depender de outra coluna não-chave;

Consultas Avançadas: Consultas com junções e subconsultas
