No mundo digital, onde dados se tornam cada vez mais valiosos, entender a relação entre banco de dados e SGBD é crucial para empresas e profissionais de diversas áreas.

O que é um Banco de Dados?
Imagine um armário organizado com diferentes gavetas para cada tipo de item: camisas, calças, sapatos, etc. Um banco de dados funciona de maneira similar, armazenando informações estruturadas de forma organizada e eficiente.

Tipos de Banco de Dados:
* Relacional: o mais comum, organiza dados em tabelas interligadas.
* Não relacional: armazena dados sem estrutura rígida, como em um e-mail.
* NoSQL: ideal para grandes volumes de dados não estruturados.
* Características de um Banco de Dados:

Organização: dados estruturados em tabelas, linhas e colunas.
* Eficiência: acesso rápido e fácil às informações.
* Segurança: proteção contra acessos não autorizados e perda de dados.
* Integridade: garante que os dados sejam precisos e consistentes.
* Compartilhamento: permite o acesso simultâneo de vários usuários.

O que é um SGBD?
O SGBD, sigla para Sistema Gerenciador de Banco de Dados, é o software que cuida da organização, do armazenamento e da manipulação dos dados no banco de dados. É como o gerente do armário, que organiza as gavetas, coloca e retira os itens, e garante que tudo esteja em ordem.

Funções Essenciais do SGBD:
* Criar e estruturar o banco de dados: define as tabelas, colunas e relacionamentos entre os dados.
* Armazenar e recuperar dados: insere, atualiza e exclui informações de forma segura.
* Gerenciar acesso e segurança: controla quem pode acessar os dados e como isso é feito.
* Garantir a integridade dos dados: evita inconsistências e erros nas informações.
* Otimizar o desempenho: garante acesso rápido e eficiente aos dados.

Tipos de SGBD:
* Relacionais: como MySQL, PostgreSQL e Oracle Database.
* NoSQL: como MongoDB, Cassandra e CouchDB.
* Em nuvem: como Amazon RDS, Microsoft Azure SQL Database e Google Cloud SQL.

Escolhendo o SGBD Ideal:
A escolha do SGBD correto depende das necessidades do projeto, como tipo de dados, volume de informações, performance e orçamento.

Benefícios de Usar um SGBD:
* Organização e eficiência: facilita o gerenciamento e a recuperação de dados.
* Segurança e confiabilidade: protege os dados contra acessos indevidos e perdas.
* Integridade dos dados: garante que as informações sejam precisas e consistentes.
* Compartilhamento de dados: permite o acesso simultâneo de vários usuários.
* Escalabilidade: possibilita o crescimento do banco de dados conforme a necessidade.

Exemplos de Aplicações de Bancos de Dados e SGBDs:
* Lojas virtuais: armazenam informações sobre produtos, clientes, pedidos e estoque.
* Redes sociais: guardam dados de perfis, publicações, interações e mensagens.
* Instituições financeiras: gerenciam contas, transações, investimentos e dados de clientes.
* Hospitais: armazenam prontuários médicos, exames, histórico de pacientes e medicamentos.
* Governos: registram informações de cidadãos, impostos, benefícios e serviços públicos.

Lembre-se: investir em um bom banco de dados e SGBD significa ganhar em organização, segurança, eficiência e competitividade no mercado.

---------------------------------------------------------- SGBD -------------------------------------------------------------------------------
Funcionalidades básicas de um SGBD: 
Creat
Read 
Update 
Delete

Características de um SGBD:
Relacionamento entre tabelas
* Linguagem de Consulta Estruturada (SQL)
* Integridade referencial
* Normalização de dados
* Segurança
* Flexibilidade e extensibilidade
* Suporte a transações ACID

ACID:
Atomicidade 
Consistência 
Isolamento 
Durabilidade

TABELAS, COLUNAS E REGISTROS:
* Tabelas: Ela é usada para armazenar dados de forma organizada. Cada tabela em um banco de dados relacional tem um nome único e é dividida em colunas e linhas
* Colunas: Uma coluna é uma estrutura dentro de uma tabela que representa um atributo específico dos dados armazenados. Cada coluna tem um nome único e um tipo de  dados associado que define o tipo de informação que pode ser armazenado nela, como números, textos, datas, etc.
* Registros: Um registro, também conhecido como linha ou tupla, é uma instância individual de dados em uma tabela.

Comando CREAT TABLE:
* Chaves primárias e estrangeiras
* Auto-incremento
* Restrições de valor:
- NOT NULL
- UNIQUE (usar para e-mail de login, por exemplo)
- DEFAULT 
Exemplo: 
CREATE TABLE destinos (
  id INT,
  nome VARCHAR(255) NOT NULL UNIQUE COMMENT 'Nome do destino',
  descricao VARCHAR(255) NOT NULL COMMENT 'Descrição do destino'
);

Comando INSERT INTO:
INSERT INTO nomeTabela (<coluna1>, <coluna2>, <coluna3>)
VALUES (<valor1>, <valor2>, <valor3>);

Comando: SELECT com Where
SELECT {{ lista_colunas}}
FROM tabela
WHERE {{condicao}};

Operadores SELECT com WHERE
* = (igualdade)
* <> ou != (desigualdade)
* > (maior que)
* < (menor que)
* >= (maior ou igual que)
* <= (menor ou igual que)
* LIKE (comparação de padrões)
* IN (pertence a uma lista de valores)
* BETWEEN (dentro de um intervalo)
* AND (e lógico)
* OR (ou lógico)

Comando UPDATE:
UPDATE {{ tabela }}
SET
{{ coluna_1 }} = {{ novo_valor_1 }},
{{ coluna_2 }} = {{ novo_valor_2 }}
WHERE
{{ condicao }};

Comando DELETE:
DELETE FROM
{{ tabela }}
WHERE
{{ condicao }};


CREATE TABLE usuario (
    id INT PRIMARY KEY,
    nome VARCHAR(200) NOT NULL COMMENT 'Nome do usuário',
    email VARCHAR(100) NOT NULL UNIQUE COMMENT 'Em-mail do usuario',
    data_nascimento DATE NOT NULL COMMENT 'data de nascimento do usuário'
);

CREATE TABLE viagens.destinos (
  id INT,
  nome VARCHAR(255) NOT NULL UNIQUE COMMENT 'Nome do destino',
  descricao VARCHAR(255) NOT NULL COMMENT 'Descrição do destino'
);

CREATE TABLE viagens.reservas (
  id INT COMMENT 'Identificador único da reserva',
  id_usuario INT COMMENT 'Referência ao ID do usuário que fez a reserva',
  id_destino INT COMMENT 'Referência ao ID do destino da reserva',
  data DATE COMMENT 'Data da reserva',
  status VARCHAR(255) DEFAULT 'pendente' COMMENT 'Status da reserva (confirmada, pendente, cancelada, etc.)'
);

-- INSERÇÃO DE DADOS:
INSERT INTO viagens.usuarios (id, nome, email, data_nascimento, endereco) VALUES 
(1, 'João Silva', 'joao@example.com', '1990-05-15', 'Rua A, 123, Cidade X, Estado Y'),
(2, 'Maria Santos', 'maria@example.com', '1985-08-22', 'Rua B, 456, Cidade Y, Estado Z'),
(3, 'Pedro Souza', 'pedro@example.com', '1998-02-10', 'Avenida C, 789, Cidade X, Estado Y');

INSERT INTO viagens.destinos (id, nome, descricao) VALUES 
(1, 'Praia das Tartarugas', 'Uma bela praia com areias brancas e mar cristalino'),
(2, 'Cachoeira do Vale Verde', 'Uma cachoeira exuberante cercada por natureza'),
(3, 'Cidade Histórica de Pedra Alta', 'Uma cidade rica em história e arquitetura');

INSERT INTO viagens.reservas (id, id_usuario, id_destino, data, status) VALUES 
(1, 1, 2, '2023-07-10', 'confirmada'),
(2, 2, 1, '2023-08-05', 'pendente'),
(3, 3, 3, '2023-09-20', 'cancelada');

-- SELEÇÃO DE DADOS: --

-- Selecionar todos os registros da tabela "usuarios"
SELECT * FROM usuarios;

-- Selecionar apenas o nome e o email dos usuários
SELECT nome, email FROM usuarios;

-- Selecionar os usuários que possuem o nome "João Silva"
SELECT * FROM usuarios WHERE nome = 'João Silva';

-- Selecionar os usuários que nasceram antes de uma determinada data
SELECT * FROM usuarios WHERE data_nascimento < '1990-01-01';

-- Like
SELECT * FROM usuarios WHERE nome LIKE '%Silva%';
SELECT * FROM usuarios WHERE nome LIKE 'Jo_o%';

-- ATUALIZAÇÃO DE DADOS --
UPDATE usuarios SET endereco = 'Nova Rua, 123' WHERE email = 'joao@example.com';

-- DELEÇÃO DE DADOS --
DELETE FROM reservas WHERE status = 'cancelada';

Alteração e exclusão de tabelas:
